// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (github_uid, login, avatar_url) VALUES (?, ?, ?)
RETURNING id, github_uid, login, avatar_url, created_at, updated_at
`

type CreateUserParams struct {
	GithubUid int64
	Login     string
	AvatarUrl sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.GithubUid, arg.Login, arg.AvatarUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubUid,
		&i.Login,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByGitHubUID = `-- name: GetUserByGitHubUID :one
SELECT id, github_uid, login, avatar_url, created_at, updated_at FROM users WHERE github_uid = ? LIMIT 1
`

func (q *Queries) GetUserByGitHubUID(ctx context.Context, githubUid int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGitHubUID, githubUid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubUid,
		&i.Login,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, github_uid, login, avatar_url, created_at, updated_at FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubUid,
		&i.Login,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserRooms = `-- name: GetUserRooms :many
SELECT r.id, r.name, r.creator_id, r.created_at, r.updated_at FROM rooms r
JOIN room_memberships rm ON r.id = rm.room_id
WHERE rm.user_id = ?
ORDER BY r.created_at DESC
`

func (q *Queries) GetUserRooms(ctx context.Context, userID int64) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getUserRooms, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET login = ?, avatar_url = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserParams struct {
	Login     string
	AvatarUrl sql.NullString
	ID        int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Login, arg.AvatarUrl, arg.ID)
	return err
}
